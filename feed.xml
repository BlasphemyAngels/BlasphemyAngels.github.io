<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-30T16:03:38+08:00</updated><id>/feed.xml</id><title type="html">Blog of Lonny</title><subtitle></subtitle><entry><title type="html">经济学思维入门</title><link href="/2021/03/22/economics.html" rel="alternate" type="text/html" title="经济学思维入门" /><published>2021-03-22T00:00:00+08:00</published><updated>2021-03-22T00:00:00+08:00</updated><id>/2021/03/22/economics</id><content type="html" xml:base="/2021/03/22/economics.html">&lt;p&gt;一直想学一下经济学的东西，换一换思想，也静下心来学一下东西，收拾卧室时偶然翻出了吃灰已久的《经济学思维》。
就抱着试试看的态度读了一下，一发不可收拾。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;思维导图：
&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/经济学思维方式.png?raw=true&quot; alt=&quot;思维导图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经济学思维方式由社会理论家创造，为的是解释秩序与协作产生的原因，因为从表面开来，个体的互动并无协调，
人人都追逐自己的利益，对于自己合作伙伴的利益几乎一无所知。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;经济学是关于选择及其无意后果的理论。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;经济学的思维方式的基本假设是：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;所有社会现象均愿意个体的行为以及与他人的互动，其间人们根据各自期望的收益与成本进行选择。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;只有个体进行选择，他们可能会自己做决定，也可能因为在集体（家庭、企业、政府机构等）中与他人协作儿做决定。
但这不应该是我们忽略下述事实：以集体名义的选择实际上是由个体做出的，他们在追求自己目标和计划的过程中衡
量取舍并进行优化。人们因为资源稀缺进行优化，这为他人创造了多种选择机会，他们的行为产生不断变动的净收益，
而对此净收益持续的相互调整过程协调了个体间的互动。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;经济学理论在研究人类行为和协作互动时，特别重视个体的选择。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;个体一直在比较期望的额外收益与成本，我们常常称为优化行为。尽管这种视角有偏或局限，但是若要解释复杂的社
会生活现状，理论时必不可少的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人天生，并且永远，是自私的动物。–《国富论》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;经济学的思维方式还强调游戏规则的重要性，以及游戏规则影响我们选择的方式。&lt;/p&gt;

&lt;p&gt;产权是游戏规则的一个关键要素，它通过法律来指定稀缺物品的所有权。“社会产权”是指把所有权指派给全社会，而
不是某个特定的人。但问题在于社会本身并不能做出选择和决策，只有个体才可以。私有产权制度把所有权指派给特
定的个体，产权可以自由交易。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;因此，私有产权能帮我们澄清不同的选择和机会，同时也构成了市场交换经济的基础。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="经济学思维" /><category term="读书笔记" /><summary type="html">初读经济学，写写笔记，以后常来看。</summary></entry><entry><title type="html">经典概率问题</title><link href="/2020/11/13/introductiontoalgorithms.html" rel="alternate" type="text/html" title="经典概率问题" /><published>2020-11-13T00:00:00+08:00</published><updated>2020-11-13T00:00:00+08:00</updated><id>/2020/11/13/introductiontoalgorithms</id><content type="html" xml:base="/2020/11/13/introductiontoalgorithms.html">&lt;h3 id=&quot;等概率随机数生成&quot;&gt;等概率随机数生成&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
假设你希望以1/2的概率输出0和1.你可以自由使用一个输出0或1的过程BIASED-RANDOM。
它以某概率p输出1，概率1-p输出0，其中&lt;code&gt;0&amp;lt;p&amp;lt;1&lt;/code&gt;，但是p的值未知。请给出一个利用BIASED-RANDOM
作为子程序的算法，返回一个无偏的结果，能以概率1/2返回0，以概率1/2返回1。
作为p的函数，你的算法的期望运行时间是多少？
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;已经有一个概率为p的随机数生成器，可以生成两次，那么可能的结果以及概率是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0 0 (1-p)(1-p)&lt;/li&gt;
  &lt;li&gt;0 1 (1-p)p&lt;/li&gt;
  &lt;li&gt;1 0 p(1-p)&lt;/li&gt;
  &lt;li&gt;1 1 pp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;期望运行时间:&lt;/p&gt;

&lt;p&gt;假设BIASED-RANDOM的运行时间为T，则&lt;/p&gt;

&lt;p&gt;可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 1&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 0&lt;/code&gt;的概率是一样的，所以运行两次01随机数生成器，如果生成为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 1&lt;/code&gt;时表示为0，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 0&lt;/code&gt;时表示为1，
其他情况则继续生成即可。&lt;/p&gt;</content><author><name></name></author><category term="算法导论" /><category term="概率问题" /><summary type="html">记录了以前遇到做过的一些有意思的概率问题。</summary></entry><entry><title type="html">Transformer</title><link href="/2019/08/13/transformer.html" rel="alternate" type="text/html" title="Transformer" /><published>2019-08-13T00:00:00+08:00</published><updated>2019-08-13T00:00:00+08:00</updated><id>/2019/08/13/transformer</id><content type="html" xml:base="/2019/08/13/transformer.html"></content><author><name></name></author><category term="NLP" /><category term="Attention" /><category term="DeepLearning" /><category term="MachineTranslation" /><summary type="html">Attention is All your need一文在今年大放异彩，其中的Transformer结构也被迅速应用于各大领域。</summary></entry><entry><title type="html">优化算法</title><link href="/2018/02/03/optimizer.html" rel="alternate" type="text/html" title="优化算法" /><published>2018-02-03T00:00:00+08:00</published><updated>2018-02-03T00:00:00+08:00</updated><id>/2018/02/03/optimizer</id><content type="html" xml:base="/2018/02/03/optimizer.html"></content><author><name></name></author><category term="DeepLearning" /><summary type="html">aa</summary></entry><entry><title type="html">整数划分</title><link href="/2018/01/02/intsplit.html" rel="alternate" type="text/html" title="整数划分" /><published>2018-01-02T00:00:00+08:00</published><updated>2018-01-02T00:00:00+08:00</updated><id>/2018/01/02/intsplit</id><content type="html" xml:base="/2018/01/02/intsplit.html">&lt;h3 id=&quot;分苹果问题&quot;&gt;分苹果问题&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;个苹果放入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;个盘子里面，问有多少种分法，不同顺序如1,1,5和5,1,1算一种分法。&lt;/p&gt;

&lt;h3 id=&quot;解析&quot;&gt;解析&lt;/h3&gt;

&lt;p&gt;设&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(m,n)&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;个苹果放入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;个盘子的方案数。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&amp;gt;m&lt;/code&gt;时，则至少有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n-m&lt;/code&gt;个盘子空着，所以拿掉这&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n-m&lt;/code&gt;个盘子对结果无影响，即&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(m,n)=f(m,n-m)&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&amp;lt;=m&lt;/code&gt;时，有两种情况：
    &lt;ol&gt;
      &lt;li&gt;至少有一个盘子空着，则方案数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(m,n-1)&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;没有盘子空着，也就是每个盘子都有至少一个苹果，那么将每个盘子都拿走一个苹果，不影响方案计数，所以此时方案数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(m-n,n)&lt;/code&gt;;
最终得到动态转移方程：&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="动态规划" /><summary type="html">整数划分可以看做是一类比较经典的动态规划问题，很多问题抽象出基本模型都可以归为整数划分问题。</summary></entry><entry><title type="html">文本处理三剑客之剑仙awk</title><link href="/2017/11/07/awk.html" rel="alternate" type="text/html" title="文本处理三剑客之剑仙awk" /><published>2017-11-07T00:00:00+08:00</published><updated>2017-11-07T00:00:00+08:00</updated><id>/2017/11/07/awk</id><content type="html" xml:base="/2017/11/07/awk.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;文本处理谁为峰，一见awk皆成空&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;作为&lt;code&gt;linux&lt;/code&gt;系统中文本处理三剑客中的老大，它几乎实现文本处理的一切问题。
 &lt;code&gt;awk&lt;/code&gt;与其说是一个命令，不如说它是一门语言。&lt;/p&gt;
&lt;p&gt;本文将带你走进awk的世界。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;引子&quot;&gt;引子&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file
output-&amp;gt;
a-b-c-d-e
f-g-e-h-g
1-2-3-4-5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看到了文件的内容了吧？有些小伙伴可能会回答：看到了，文件内有3行内容。
这是正确的回答吗？也对也不对。&lt;/p&gt;

&lt;p&gt;更严谨的回答是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;文件内有一些内容（字符流），如果用\n作为记录分隔符，则可以将内容看做3条记录（行）。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;记住这个定义，这很重要，因为我们可以以别的字符当做记录分隔符。记录分隔符的不同将产生不同的记录。&lt;/p&gt;

&lt;p&gt;同样对于每条记录来说，使用域分隔符可以将每条记录分割成不同的域。&lt;/p&gt;

&lt;p&gt;例如，指定记录分隔符为\n，域分隔符为-，则上面的文件含有3条记录，每条记录有5个域。通过指定哪一条记录以及哪一个域，
即可准确得到文件中的数据，比如第2条记录的第3个域为”e”。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的运作方式跟上面所说的有什么关系呢？其实&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;通过事先指定好记录分隔符（默认\n）以及域分隔符（默认空格）将文件
内容分成多条记录，每条记录中有多个域，然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;会依次读入每条记录，对其中的域做一些定制化的处理，完成我们所需要做的
工作。&lt;/p&gt;

&lt;h4 id=&quot;基本知识&quot;&gt;基本知识&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的主要功能是过滤内容（取列）。&lt;/p&gt;

&lt;p&gt;命令一般格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;参数] &lt;span class=&quot;s1&quot;&gt;'[match] {action script}'&lt;/span&gt; filename&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;awk的[match] {action script}可以有多个:&lt;/p&gt;
  &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'match {script} match {script} match {script} ...'&lt;/span&gt; filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;awk常用的参数有两个：&lt;code&gt;-v&lt;/code&gt;和&lt;code&gt;-F&lt;/code&gt;。
啊？还有没有别的，不要问，问就是没有，因为我不会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/否认三连.gif?raw=true&quot; alt=&quot;否认三连&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-F&lt;/code&gt;比较简单，就是定义awk处理时文件一条记录中域的分隔符，如果不设置默认是空格。&lt;/p&gt;

&lt;p&gt;如文件中一条记录为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a-b-c&lt;/code&gt;，然后指定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk -F '-' ...&lt;/code&gt;，则awk处理时就会以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;为第1个域,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;为第2个域……,回想一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux&lt;/code&gt;中的命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cut&lt;/code&gt;，它也是用来取文件中某一列内容的，他的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数指定列分隔符，然后用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;指定取那一列，如:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat test
&lt;/span&gt;a-b-c
d-e-f
g-h-k
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2
b
e
h&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;awk处理时可以根据&lt;code&gt;match&lt;/code&gt;匹配特定的记录进行&lt;code&gt;script&lt;/code&gt;内的处理，不匹配的记录则不处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;一般格式是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/regex/&lt;/code&gt;，两条斜线建的正则表达式可以提供丰富的匹配的方式对记录进行匹配处理。
如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk -F '-' '/^rex*/ {script}' filename&lt;/code&gt;就表示只处理以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rex&lt;/code&gt;开头的记录。不写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;会匹配所有记录。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
    awk还提供了两个比较特殊的匹配模式，&lt;code&gt;BEGIN&lt;/code&gt;和&lt;code&gt;END&lt;/code&gt;。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEGIN {script}&lt;/code&gt;表示在文件读取所有记录之前执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;内容。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END {script}&lt;/code&gt;表示在文件读取所有记录之后执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;内书写awk对匹配到的记录要执行的命令语句，语法类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;语言，如:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print($n)}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;意思就是打印文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;中每一记录的第&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;个域。而列的定义是默认空格分割，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-F&lt;/code&gt;选项指定，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;后面可以跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1,2,3,...,NF-1,NF&lt;/code&gt;，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF&lt;/code&gt;表示最后一列的号码。&lt;/p&gt;

&lt;p&gt;除了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;代码中还有哪些特殊符号呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NR&lt;/code&gt; 当前处理到第几条记录&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF&lt;/code&gt; 每条记录域的数目&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGC&lt;/code&gt; 命令行参数个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGV&lt;/code&gt; 命令行参数数组&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGIND&lt;/code&gt;	命令行正在处理的当前文件的AGV的索引。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILENAME&lt;/code&gt; awk浏览的文件名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FNR&lt;/code&gt; 浏览文件的记录数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FS&lt;/code&gt; 设置输入域分隔符，等价于命令行 -F选项&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFS&lt;/code&gt; 输出域分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RS&lt;/code&gt; 输入记录分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ORS&lt;/code&gt; 输出记录分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONVFMT&lt;/code&gt;	转换数字格式&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENVIRON&lt;/code&gt;	从shell中传递来的包含当前环境变量的数组&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERRNO&lt;/code&gt;	当使用close函数或者通过getline函数读取的时候，发生的重新定向错误的描述信息就保存在这个变量中&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIELDWIDTHS&lt;/code&gt;	在对记录进行固定域宽的分割时，可以替代FS的分隔符的列表&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGNORECASE&lt;/code&gt;	在正则表达式和字符串操作中关闭大小写敏感&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFMT&lt;/code&gt;	数字输出格式,如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFMT=%.2lf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLENGTH&lt;/code&gt;	通过match函数匹配的字符串的长度&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSTART&lt;/code&gt;	通过match函数匹配的字符串的偏移量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUBSEP&lt;/code&gt;	下标分隔符，多用于二位数组使用&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;打印的小技巧：打印小数时可以使用强大的&lt;code&gt;printf&lt;/code&gt;函数，它能像c语言中一样使用，如&lt;code&gt;printf(&quot;%.2f&quot;, x)&lt;/code&gt;；也可以使用&lt;code&gt;OFMT&lt;/code&gt;变量，如&lt;code&gt;awk '{OFMT=&quot;%.2f&quot;; print(3.1415926)}'&lt;/code&gt;，&lt;code&gt;OFMT&lt;/code&gt;默认值是&quot;%.6f&quot;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;awk数组&quot;&gt;awk数组&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的数组和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;语言的数组其实没什么不同，只是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;中的数组不需要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;声明&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如现在有一个文件，里面的内容如下：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat test
&lt;/span&gt;a-d
b-e
a-f
c-g
f-z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;每一条记录的两个字母构成了一个字母对，现在需要根据第一个字母进行去重，对于第一个字母相同的字母对只保留最后出现的那一个字母对。应该怎么做？&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;数组即可。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{a[$1]=$2}END{for(k in a) print k,a[k]}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;a f
b e
c g
f z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里有一个问题，有些同学会将命令写为：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{a[$1]=$2}END{for(k in a) print k,a[k]}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;但是这样的话会发现将什么也不输出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/没想到吧意不意外.jpg?raw=true&quot; alt=&quot;意不意外&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这就跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;前面讲的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END&lt;/code&gt;相关了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;提供&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END&lt;/code&gt;的作用是在程序开始之能够初始化一些状态，在程序结束之后能够做一些扫尾工作。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;之后的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;内的操作将在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;开始扫描输入之前执行，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END&lt;/code&gt;之后的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;内的操作将在扫描完全部的输入之后执行。因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。&lt;/p&gt;

&lt;p&gt;所以很明显，这位同学写的语句中为数组赋值的语句只在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;扫描文本之前执行一遍，而在扫描文本的过程中并没有向数组中填写内容，所以没有任何输出结果。&lt;/p&gt;

&lt;p&gt;那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;支不支持二维数组呢？其实也支持，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的数组可以理解为一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;字典&lt;/code&gt;，它的索引只接受字符串，但是我们可以使用数字索引，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;内部会把数字内部索引转换为字符串。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[1,2]&lt;/code&gt;时代表使用了二维数组，但是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;内部会将其转换为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[&quot;1\0342&quot;]&lt;/code&gt;。其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\034&lt;/code&gt;代替，也可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUBSEP&lt;/code&gt;代替，它的意思是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscript Sepqrator&lt;/code&gt;数组下标分隔符。&lt;/p&gt;

&lt;p&gt;所以下面的几条命令是等价的:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {Arr[2,79]=78 print Arr[&quot;2\03479&quot;]}'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {Arr[2,79]=78 print Arr[2,79]}'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {Arr[2,79]=78 print Arr[&quot;2\03479&quot;]}'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {Arr[2,79]=78 idx=2 SUPBSEP 79 print Arr[idx]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;条件和循环&quot;&gt;条件和循环&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;可以书写流程控制语句，如条件语句:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    statement&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ... ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expression1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    statement3&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;条件语句中常使用的逻辑运算符也跟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;语言一样，如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;表示且等。&lt;/p&gt;

&lt;p&gt;循环:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    statement
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;arrary&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    statement
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;中的循环和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;语言基本相同，都可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt;等有语句。&lt;/p&gt;

&lt;h4 id=&quot;实验&quot;&gt;实验&lt;/h4&gt;

&lt;p&gt;下面来介绍一个小例子，说明&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的强大应用，取出下列文本中电话号码并进行去重。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat test
&lt;/span&gt;a-111111-hgehe
b-222222-popop
c-111111-cdsfs
d-123456-rtryr
a-245124-bdfef
c-123456-aaads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cut&lt;/code&gt;命令:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2 &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;
      1
      1 a hehe a
      1 b hehe b
      1 c hehe c
      2 c hehe d
      2 f hehe f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;进阶&quot;&gt;进阶&lt;/h4&gt;

&lt;h5 id=&quot;匹配操作符&quot;&gt;匹配操作符&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;参数] &lt;span class=&quot;s1&quot;&gt;'[match] {action script}'&lt;/span&gt; filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面降到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;的基本格式如上所述。其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[match]&lt;/code&gt;中书写匹配模式来匹配要处理的记录，但是默认匹配模式是匹配记录的所有内容的，
如果我只想筛选匹配出某一个域满足一定模式的记录，这时改怎么办呢？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt;运算符就派上用场了，它可以用来在某个域中匹配模式。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2 ~ /[Cc]houdidi/'&lt;/span&gt; text   &lt;span class=&quot;c&quot;&gt;# 匹配text中第2个域为Choudidi以及choudidi的记录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!~&lt;/code&gt;表示不匹配。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;匹配范围&quot;&gt;匹配范围&lt;/h5&gt;

&lt;p&gt;匹配范围的一般写法是：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pattern1,pattern2 {}'&lt;/span&gt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;匹配的范围是:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;pattern1的第一次匹配到pattern2的第一次匹配&lt;/li&gt;
  &lt;li&gt;pattern1的第二次匹配到pattern2的第二次匹配&lt;/li&gt;
  &lt;li&gt;pattern1匹配，而pattern2为匹配，则范围是从pattern1到文件结尾&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^lonny/,/^angel/ {print$2}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 打印以lonny开头到以angel开头的所有记录的第2个域&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2 &amp;lt; 1024 &amp;amp;&amp;amp; /lonny/ {print}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 打印第2个域小于1024且记录中包含lonny的所有记录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'{OFS = &quot;?&quot;}; /lonny/{print($1, $2);}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 1. 指定:为域分隔符&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 指定?为输出的域分隔符&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3. 匹配所有包含lonny的记录的第1个和第2个域&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$3 == &quot;Lonny&quot; || $1 ~ /angel/ {print($2, $3)}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 打印第3个域等于Lonny或者第一个域匹配angel的记录的第2个和第3个域&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!($4 &amp;gt; 13) {print($8)}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 打印第4个域不大于13的记录的第8个域&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;赋值&quot;&gt;赋值&lt;/h6&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6.  赋值符号：
#找到第三个域等于Ann的记录，然后给该域重新赋值为Christian，之后再打印输出该记录。 ```sh awk '$3 == &quot;lonny&quot; { $3 = &quot;Angel&quot;; print}' file # 找到第三个域等于lonny的记录，将此域重新赋值为Angel，然后再打印这一条的记录 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/lonny/{$8 += 12; print($8)}'&lt;/span&gt; file
&lt;span class=&quot;c&quot;&gt;# 找到包含lonny的记录，将此记录的第8个域的值加12，再打印这个域的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;io以及重定向&quot;&gt;IO以及重定向&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;中使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt;函数完成输入重定向。它能够从标准输入、管道或者当前正在处理的文件之外的其他文件获得输入。
它负责从输入中获得下一条记录的内容，并给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NF&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NR&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FNR&lt;/code&gt;等内置变量赋值。如果得到一个记录，getline就返回1，
到达文件末尾则返回0，遇到异常则返回-1。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {&quot;date&quot; | getline dt; print dt}'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. 执行shell命令date&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 通过管道将结果给getline&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3. getline将结果赋值给变量dt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4. 打印输出dt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { &quot;date&quot; | getline d; split(d,mon); print mon[2]}'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. 执行shell命令date&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 通过管道将结果给getline&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3. getline将结果赋值给变量d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4. 将变量d使用内置函数split拆分成mom数组&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 5. 打印数组的第2个元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { while(&quot;ls&quot; | getline) print}'&lt;/span&gt;
a.txt
b.jpg
c.png
&lt;span class=&quot;c&quot;&gt;# 1. 将ls的输出传递给getline作为输入，每个依次循环输入&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. getline依次读出每一条记录并打印&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { printf &quot;What is your name? &quot;; \
    getline name &amp;lt; &quot;/dev/tty&quot;}\
    $1 ~ name {print &quot;Found&quot; name &quot; on line &quot;, NR &quot;.&quot;}\
    END {print &quot;See ya, &quot; name &quot;.&quot;}'&lt;/span&gt; text
&lt;span class=&quot;c&quot;&gt;# 1. 处理BEGIN模块, 打印&quot;What is your name?&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 等待用户从/dev/tty输入，将输入数据赋值给变量name, BEGIN模块处理完成&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3. 依次匹配处理text文件每一条记录，将第1个域跟name变量内容匹配的记录进行打印相关信息&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4. 处理END模块，打印相关信息，结束&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { while(getline &amp;lt; &quot;/etc/passwd&quot; &amp;gt; 0) lc++; print lc}'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. 逐条记录读取/etc/passwd的内容，每正常读到一条记录,lc计数器增加1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 到达末尾时打印lc值,这时lc的值就是/etc/passwd文件的记录条数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;由于awk中同时打开的管道只有一个，那么在打开下一个管道之前必须关闭它，管道符号右边可以通过双引
号关闭管道。如果不关闭，它将始终保持打开状态，直到awk退出。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;print &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; | &lt;span class=&quot;s2&quot;&gt;&quot;sort -4 +1 -2 +0 -1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; END &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;close&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sort -4 +1 -2 +0 -1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filename

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上例中END模块中的close显示关闭了sort的管道，需要注意的是close中关闭的命令必须和当初打开时的完全匹配，
否则END模块产生的输出会和以前的输出一起被sort分类。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$4 &amp;gt;= 70 {print $1,$2 &amp;gt; &quot;passing_file&quot;}'&lt;/span&gt; filename  &lt;span class=&quot;c&quot;&gt;#注意这里的文件名需要用双引号括起来。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. &amp;gt; 可以完成输出重定向&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 使用&amp;gt;时原文件被清空，文件持续打开，知道文件被关闭或者awk程序停止&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3. 来自后面的打印语句的输出都会追加到文件内&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;
使用&amp;gt;&amp;gt;可以打开一个文件但是不清空原文件内容，只追加!
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;内置函数&quot;&gt;内置函数&lt;/h5&gt;
&lt;h6 id=&quot;时间函数&quot;&gt;时间函数&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systime()&lt;/code&gt; 返回当前时间距离1970年1月1日之间相差的秒数&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{print systime()}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;sub和gsub&quot;&gt;sub和gsub&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;regular expression, substitution string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 没有指定target string，则操作对象为读到的整条记录&lt;/span&gt;
sub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;regular expression, substitution string, target string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 将target汇总的regular替换为substitution&lt;/span&gt;
gsub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;regular expression, substitution string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
gsub&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;regular expression, substitution string,target string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gsub和sub的差别在于：如果第一个参数中正则表达式在记录中出现多次，那么gsub将完成多次替换，
而sub只替换第一次出现。&lt;/p&gt;

&lt;h6 id=&quot;index&quot;&gt;index&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;index&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string, substring&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将返回第二个参数在第一个参数中出现的位置，偏移量从1开始。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{print index(&quot;hello&quot;,&quot;el&quot;)}'&lt;/span&gt;
output-&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;length&quot;&gt;length&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;length&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该函数返回字符串的长度。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{print length(&quot;hello&quot;)}'&lt;/span&gt;
output-&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;substr&quot;&gt;substr&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;substr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string,starting position&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 截取string中从starting position开始到结尾的子串&lt;/span&gt;
substr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string,starting position,length of string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 截取string中从starting position开始的length字符构成的子串&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;
函数偏移量均为1.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{name = substr(&quot;Hello World&quot;,2,3); print name}'&lt;/span&gt;
ell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;match&quot;&gt;match&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;match&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string,regular expression&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正则表达式匹配函数，返回正则表达式在字符串中的位置，如果没有匹配的返回0；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;函数有两个内置变量：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RSTART 表示匹配到的字符串的起始位置&lt;/li&gt;
  &lt;li&gt;RLENGTH 表示匹配到的字符串的长度&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{start=match(&quot;I love the string: 1024&quot;, /[0-9]+$/); print(start)}'&lt;/span&gt;
output-&amp;gt; 20
&lt;span class=&quot;c&quot;&gt;# 1. 正则表达式[0-9]+$表示在字符串的末尾搜索连续的数字串&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. 在&quot;I love the string: 1024&quot;中第20个位置找到&quot;1024&quot;是匹配的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{match(&quot;I love the string: 1024&quot;, /[0-9]+$/); print(RSTART, RLENGTH)}'&lt;/span&gt;
output-&amp;gt; 20 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{string=&quot;I love the string: 1024&quot;; start=match(string, /[0-9]+$/); print(substr(string, RSTART, RLENGTH));}'&lt;/span&gt;
output-&amp;gt; 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;toupper和tolower&quot;&gt;toupper和tolower&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toupper&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
tolower&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;返回字符串的大写和小写形式。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{print(toupper(&quot;lonny&quot;)); print(tolower(&quot;XIAOSHIYU&quot;));}'&lt;/span&gt;
output-&amp;gt;
LONNY
xiaoshiyu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;split&quot;&gt;split&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string,array,field seperator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string,array&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;field seperator&lt;/code&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;分割成一个数组，如果没有指定field seperator则使用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FS&lt;/code&gt;值。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{split(&quot;i love philosophy&quot;, strs, &quot; &quot;); for(idx in strs) print(str[idx]);}'&lt;/span&gt;
output-&amp;gt;
love
philosophy
i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;sprintf&quot;&gt;sprintf&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string with format specifiers &quot;&lt;/span&gt;,expr1,expr2,...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;该函数和printf的差别等同于C语言中printf和sprintf的差别。
前者将格式化后的结果输出到输出流，而后者输出到函数的返回值中。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{line = sprintf(&quot;%-15s %6.2f&quot;, &quot;lonny&quot;, 3.1415); print(line);}'&lt;/span&gt;
output-&amp;gt;
lonny             3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;argc和argv&quot;&gt;ARGC和ARGV&lt;/h6&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN {for(i = 0; i &amp;lt; ARGC; ++i) printf(&quot;argv[%d] is %s.\n&quot;, i, ARGV[i]); printf(&quot;The number of arguments, ARGC=%d\n&quot;, ARGC)}'&lt;/span&gt; file &lt;span class=&quot;s2&quot;&gt;&quot;Lonny&quot;&lt;/span&gt; 12
output-&amp;gt;
argv[0] is awk.
argv[1] is file.
argv[2] is Lonny.
argv[3] is 12.
The number of arguments, &lt;span class=&quot;nv&quot;&gt;ARGC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;实践应用&quot;&gt;实践应用&lt;/h4&gt;

&lt;h5 id=&quot;日志分析&quot;&gt;日志分析&lt;/h5&gt;
&lt;p&gt;在实际工作中，经常进行的就是日志分析&lt;/p&gt;

&lt;p&gt;m.log:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I123 [recommend log] [re ts: 10ms] [nk ts: 9ms] [angel abflag: china_lonny i2rank: 987
I love drinking, I love apple.]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;统计&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nk ts&lt;/code&gt;的毫秒数：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zcat m.log.[1-9].gz | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'china_lonny'&lt;/span&gt;|awk &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nk ts:'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print$2}'&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1|awk &lt;span class=&quot;s1&quot;&gt;'{sum+=$1}END{print(sum/NR)}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;配置读取&quot;&gt;配置读取&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;main] &lt;span class=&quot;c&quot;&gt;# section&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lonny
&lt;span class=&quot;nv&quot;&gt;search_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/data1/lonny/

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;chain]
&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;angel
&lt;span class=&quot;nv&quot;&gt;search_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9
&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/data1/bob/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;类似上面这样的配置文件，怎么通过制定section以及配置项读取到相应的配置值呢？
可能有人想到了python中有一个模块可以用来做这个工作，但是太繁琐了，而且在shell中也无法使用。&lt;/p&gt;

&lt;p&gt;而用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt;可以完美解决:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;__readINI&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;INIFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ITEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
        if($0~/^\['&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SECTION&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\]\s*$/){
            a=1
        }
        else if(a==1&amp;amp;&amp;amp;$1==&quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ITEM&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;){
            for(i=2;i&amp;lt;NF;i++){
                printf(&quot;%s=&quot;,$i);
            }
            print $NF;
            exit;
        }
        else if(a==1&amp;amp;&amp;amp;$0~/^\[/)
            exit;
    }'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INIFILE&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="linux" /><summary type="html">工欲善其事，必先利其器。初次使用linux就被文本处理三剑客以及编辑器之神vim所折服。</summary></entry><entry><title type="html">m-RNN</title><link href="/2017/07/04/m-Rnn.html" rel="alternate" type="text/html" title="m-RNN" /><published>2017-07-04T00:00:00+08:00</published><updated>2017-07-04T00:00:00+08:00</updated><id>/2017/07/04/m-Rnn</id><content type="html" xml:base="/2017/07/04/m-Rnn.html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1412.6632v5.pdf&quot;&gt;论文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文章提出一种多模态图像文本匹配的方法，使用CNN-RNN架构，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn.png?raw=true&quot; alt=&quot;m-rnn&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;其中前两层是词嵌入层，讲每一个词变为一个稠密向量。接下来是recurrent层，用来捕捉句子的语义和语法信息。这里注意训练好词向量之后不是将它们拼接起来而是输入到recurrent层，用来捕捉句子的语义和语法信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-rt.png?raw=true&quot; alt=&quot;m-rnn-rt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们先将上一个状态r(t-1)映射到词向量空间内w(t),然后再加上w(t)。&lt;/p&gt;

&lt;p&gt;下一层是多模态层，将文本向量，图像向量和recurrent层输出向量映射成为到一个统一空间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-m.png?raw=true&quot; alt=&quot;m-rnn-m&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再相加得到多模态的输出。&lt;/p&gt;

&lt;p&gt;其中g函数使用如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-m.png?raw=true&quot; alt=&quot;m-rnn-g&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf&quot;&gt;公式原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;将值映射到一个相比双曲正切更加非线性的范围，而且收敛速度更快。&lt;/p&gt;

&lt;p&gt;最后一层是softmax层，输出概率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-loss.png?raw=true&quot; alt=&quot;loss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中L代表句子长度，wi代表词，I代表图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-loss2.png?raw=true&quot; alt=&quot;loss2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;N代表训练集单词数，Ns代表训练集中句子的个数。&lt;/p&gt;

&lt;p&gt;最小化cost相当于最大化由图像产生句子的最大概率。&lt;/p&gt;

&lt;h3 id=&quot;数据集&quot;&gt;数据集&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IAPR TC-12 20000张图片，每张图片评价1.7个描述，每张图片至少一个描述。&lt;/li&gt;
  &lt;li&gt;Flickr8K 8000张图片，每张图片5个描述，6000-train 1000-test 1000-vaildate&lt;/li&gt;
  &lt;li&gt;Flickr30K 31783张图片，每张图片5个描述。&lt;/li&gt;
  &lt;li&gt;MS COCO 82783张图片，每张图片5个描述。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;部分实验结果&quot;&gt;部分实验结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/BlasphemyAngels/MarkDownPhotos/blob/master/m-rnn-exper.png?raw=true&quot; alt=&quot;exper&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;m-rnn是一个先生成后检索模型，其应该是第一个使用 CNN + RNN 这种 encoder-decoder 模型来做图文相关任务.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 VggNet 来抽取图片特征&lt;/li&gt;
  &lt;li&gt;使用两个 Embedding 层来对每个单词进行稠密特征编码&lt;/li&gt;
  &lt;li&gt;多模态部分的输入有图片特征、单词编码和上下文信息&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;目标函数是给定图片 I，使得生成的图片描述尽可能像图片的真实描述 S 。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;image的特征并没有输入到RNN&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="图文多模态" /><summary type="html">图像文本的多模态融合应用越来越广泛，本文是早起基于深度学习的多模态融合的一个经典方法，有一定的借鉴意义。</summary></entry></feed>